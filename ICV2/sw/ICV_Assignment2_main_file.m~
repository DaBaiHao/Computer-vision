
%% 4) Motion estimation
%% 4 - a : Display the motion vectors
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% input Block 16 * 16
block_Size = 16;

% searchingWindows
searching_Windows_size = 20;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockMatch(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - b :  Display the image Pt+1, predicted version of It+1, 
% video path 
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% input Block 16 * 16
block_Size = 16;

% searchingWindows
searching_Windows_size = 20;

% do Display the motion vectors, and predict img
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_predictionOfFrame(img1,img2,block_Size,searching_Windows_size);


%% 4 - c :  16x16 search window, block_Size 4x4 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 4;

% 16x16 search window,
searching_Windows_size = 16;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se16(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - c :  16x16 search window, block_Size 16 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 16;

% 16x16 search window,
searching_Windows_size = 16;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se16_mb16(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - c :  16x16 search window, block_Size 88 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 8;

% 16x16 search window,
searching_Windows_size = 16;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se16_mb88(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - d :  88 search window, block_Size 88 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 8;

% 16x16 search window,
searching_Windows_size = 8;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se88_mb88(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - d :  16 search window, block_Size 88 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 8;

% 16x16 search window,
searching_Windows_size = 16;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se88_mb88(img1,img2,block_Size,searching_Windows_size);
toc;
%% 4 - d :  32 search window, block_Size 88 
% video path 
tic;
video = "DatasetC.mpg";
obj = VideoReader(video);
% two consecutive frames 
img1 = read(obj,9);
img2 = read(obj,10);

% block_Size 4x4 
block_Size = 8;

% 16x16 search window,
searching_Windows_size = 32;

% do Display the motion vectors
% needed input:
%  - first frame 
%  - second frame 
%  - block Size (if the block is 16 * 16, the size of the block is :16)
%  - searching Windows size (if the searching Windows is 20 * 20, the size of the searching Windows is :20) 
img_block = ICV_blockmatch_se88_mb88(img1,img2,block_Size,searching_Windows_size);
toc;
%% 2-1
video_path = "DatasetC.mpg";
ICV_captureMovingObjectFirstFrame(video_path,40);
%% 2-2
video_path = "DatasetC.mpg";
ICV_captureMovingObjectPreviousFrame(video_path,20);

%% 2-3
video_path = "DatasetC.mpg";
backgroundImg = ICV_generateBackground(video_path);


%% 2-4
video_path = "DatasetC.mpg";
backgroundImg = ICV_generateBackground(video_path);
ICV_countMovingObject(backgroundImg,video_path,34);


%% 3 -1

img_path = "face-2.jpg";

img = imread(img_path);
img = rgb2gray(img);

block = 32;
imgs = ICV_divideIntoNonOverlapping(img,block);
[~,~,number] = size(imgs);

for i = 1:number
    figure(i)
    ICV_LBPfunction(img);
end
    


